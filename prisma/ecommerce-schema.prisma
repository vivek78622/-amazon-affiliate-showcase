// E-commerce Database Schema
// This schema supports a full-featured e-commerce platform

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User and Authentication
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String?
  image         String?
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Profile information
  phone         String?
  dateOfBirth   DateTime?
  gender        String?
  
  // Addresses
  addresses     Address[]
  
  // Orders and shopping
  orders        Order[]
  cartItems     CartItem[]
  wishlistItems WishlistItem[]
  reviews       Review[]
  
  // Authentication
  accounts      Account[]
  sessions      Session[]
  
  // Newsletter
  newsletterSubscribed Boolean @default(false)
  newsletterSubscribedAt DateTime?
  
  // Admin role
  isAdmin       Boolean   @default(false)
  
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Product Categories
model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?
  image       String?
  icon        String?
  color       String?
  sortOrder   Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  products    Product[]
  subcategories Subcategory[]
  parentCategory Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  parentId    String?
  childCategories Category[] @relation("CategoryHierarchy")

  @@map("categories")
}

model Subcategory {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  image       String?
  sortOrder   Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  categoryId  String
  category    Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  products    Product[]

  @@map("subcategories")
}

// Products
model Product {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String   @db.Text
  shortDescription String?
  
  // Pricing
  price       Decimal  @db.Decimal(10, 2)
  comparePrice Decimal? @db.Decimal(10, 2)
  costPrice   Decimal? @db.Decimal(10, 2)
  
  // Inventory
  sku         String?  @unique
  barcode     String?
  stock       Int      @default(0)
  lowStockThreshold Int @default(5)
  trackInventory Boolean @default(true)
  
  // Product details
  weight      Decimal? @db.Decimal(8, 2)
  dimensions  Json?    // {length, width, height}
  brand       String?
  model       String?
  
  // Status
  isActive    Boolean  @default(true)
  isFeatured  Boolean  @default(false)
  isOnSale    Boolean  @default(false)
  
  // SEO
  metaTitle   String?
  metaDescription String?
  metaKeywords String?
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  publishedAt DateTime?

  // Relations
  categoryId  String
  category    Category @relation(fields: [categoryId], references: [id])
  subcategoryId String?
  subcategory  Subcategory? @relation(fields: [subcategoryId], references: [id])
  
  images      ProductImage[]
  variants    ProductVariant[]
  attributes  ProductAttribute[]
  reviews     Review[]
  cartItems   CartItem[]
  wishlistItems WishlistItem[]
  orderItems  OrderItem[]
  
  // Related products
  relatedProducts Product[] @relation("ProductRelations")
  relatedTo      Product[] @relation("ProductRelations")

  @@map("products")
}

model ProductImage {
  id        String   @id @default(cuid())
  url       String
  alt       String?
  sortOrder Int      @default(0)
  isPrimary Boolean  @default(false)
  createdAt DateTime @default(now())

  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_images")
}

model ProductVariant {
  id        String   @id @default(cuid())
  name      String   // e.g., "Size", "Color"
  value     String   // e.g., "Large", "Red"
  price     Decimal? @db.Decimal(10, 2)
  stock     Int      @default(0)
  sku       String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_variants")
}

model ProductAttribute {
  id        String   @id @default(cuid())
  name      String   // e.g., "Material", "Brand"
  value     String   // e.g., "Cotton", "Nike"
  createdAt DateTime @default(now())

  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_attributes")
}

// Shopping Cart
model CartItem {
  id        String   @id @default(cuid())
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("cart_items")
}

// Wishlist
model WishlistItem {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("wishlist_items")
}

// Addresses
model Address {
  id          String   @id @default(cuid())
  type        String   // "shipping" or "billing"
  firstName   String
  lastName    String
  company     String?
  address1    String
  address2    String?
  city        String
  state       String
  postalCode  String
  country     String
  phone       String?
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Orders using this address
  shippingOrders Order[] @relation("ShippingAddress")
  billingOrders  Order[] @relation("BillingAddress")

  @@map("addresses")
}

// Orders
model Order {
  id          String   @id @default(cuid())
  orderNumber String   @unique
  status      String   @default("pending") // pending, processing, shipped, delivered, cancelled, refunded
  
  // Pricing
  subtotal    Decimal  @db.Decimal(10, 2)
  tax         Decimal  @db.Decimal(10, 2) @default(0)
  shipping    Decimal  @db.Decimal(10, 2) @default(0)
  discount    Decimal  @db.Decimal(10, 2) @default(0)
  total       Decimal  @db.Decimal(10, 2)
  
  // Payment
  paymentMethod String?
  paymentStatus String  @default("pending") // pending, paid, failed, refunded
  paymentIntentId String?
  
  // Shipping
  trackingNumber String?
  shippingMethod String?
  estimatedDelivery DateTime?
  shippedAt    DateTime?
  deliveredAt  DateTime?
  
  // Customer info
  customerEmail String
  customerPhone String?
  
  // Notes
  notes       String?
  adminNotes  String?
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId      String?
  user        User?    @relation(fields: [userId], references: [id])
  shippingAddressId String?
  shippingAddress Address? @relation("ShippingAddress", fields: [shippingAddressId], references: [id])
  billingAddressId String?
  billingAddress  Address? @relation("BillingAddress", fields: [billingAddressId], references: [id])
  
  items       OrderItem[]
  refunds     Refund[]

  @@map("orders")
}

model OrderItem {
  id        String   @id @default(cuid())
  quantity  Int
  price     Decimal  @db.Decimal(10, 2)
  total     Decimal  @db.Decimal(10, 2)
  
  // Product snapshot
  productName String
  productSku  String?
  productImage String?
  
  // Variant info
  variantName String?
  variantValue String?

  orderId    String
  order      Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId  String
  product    Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

// Refunds
model Refund {
  id          String   @id @default(cuid())
  amount      Decimal  @db.Decimal(10, 2)
  reason      String
  status      String   @default("pending") // pending, approved, processed, rejected
  processedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  orderId     String
  order       Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("refunds")
}

// Reviews
model Review {
  id        String   @id @default(cuid())
  rating    Int      // 1-5 stars
  title     String?
  comment   String   @db.Text
  isVerified Boolean @default(false)
  isApproved Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("reviews")
}

// Discounts and Coupons
model Coupon {
  id          String   @id @default(cuid())
  code        String   @unique
  type        String   // "percentage" or "fixed"
  value       Decimal  @db.Decimal(10, 2)
  minimumAmount Decimal? @db.Decimal(10, 2)
  maximumDiscount Decimal? @db.Decimal(10, 2)
  
  usageLimit  Int?
  usedCount   Int      @default(0)
  
  startsAt    DateTime?
  expiresAt   DateTime?
  isActive    Boolean  @default(true)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("coupons")
}

// Newsletter Subscribers
model NewsletterSubscriber {
  id        String   @id @default(cuid())
  email     String   @unique
  isActive  Boolean  @default(true)
  subscribedAt DateTime @default(now())
  unsubscribedAt DateTime?

  @@map("newsletter_subscribers")
}

// Search and Analytics
model SearchLog {
  id        String   @id @default(cuid())
  query     String
  results   Int
  userId    String?
  sessionId String?
  createdAt DateTime @default(now())

  @@map("search_logs")
}

model PageView {
  id        String   @id @default(cuid())
  url       String
  referrer  String?
  userAgent String?
  ipAddress String?
  userId    String?
  sessionId String?
  createdAt DateTime @default(now())

  @@map("page_views")
}

// Settings and Configuration
model SiteSettings {
  id    String @id @default("main")
  key   String @unique
  value String @db.Text
  type  String @default("string") // string, number, boolean, json

  @@map("site_settings")
} 